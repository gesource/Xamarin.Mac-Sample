// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using CoreGraphics;

namespace DragSample
{
    public partial class MainView : NSView
    {
        private NSTrackingArea trackingArea = null;
        /// <summary>
        /// ドラッグする図形の中心点
        /// </summary>
        private CGPoint center = new CGPoint(100, 100);
        /// <summary>
        /// ドラッグする図形の大きさ
        /// </summary>
        private const int RectSize = 100;
        /// <summary>
        /// ドラッグしている時はtrue
        /// </summary>
        private bool isDragging = false;
        /// <summary>
        /// ドラッグ開始座標と図形の中心点の距離
        /// </summary>
        private CGPoint distance;

        public MainView(IntPtr handle) : base(handle)
        {
            InitTracking();

            // サイズが変更されたら、トラッキングの範囲を更新する
            NSNotificationCenter.DefaultCenter.AddObserver(
                NSView.FrameChangedNotification,
                (notification) => { InitTracking(); });
        }

        /// <summary>
        /// トラッキングの設定を行います
        /// </summary>
        private void InitTracking()
        {
            if (trackingArea != null)
                this.RemoveTrackingArea(trackingArea);

            trackingArea = new NSTrackingArea(
                CGRect.Empty,
                NSTrackingAreaOptions.ActiveAlways | NSTrackingAreaOptions.MouseEnteredAndExited | NSTrackingAreaOptions.MouseMoved | NSTrackingAreaOptions.InVisibleRect,
                this,
                null);
            this.AddTrackingArea(trackingArea);
        }

        public override void DrawRect(CGRect dirtyRect)
        {
            // Viewの領域を描画
            NSColor.Red.SetStroke();
            NSBezierPath.StrokeRect(this.Bounds);

            // ドラッグの状態によって図形の色を変える
            if (isDragging) NSColor.Blue.SetFill();
            else NSColor.Red.SetFill();

            // 図形を描画
            NSBezierPath.FillRect(GetRect());
        }

        /// <summary>
        /// 図形の座標
        /// </summary>
        private CGRect GetRect()
        {
            return new CGRect(center.X - RectSize / 2, center.Y - RectSize / 2, RectSize, RectSize);
        }

        public override void MouseDown(NSEvent theEvent)
        {
            // マウスポインタの位置に図形があればドラッグを開始する
            var rect = GetRect();
            var p = ConvertPointFromView(theEvent.LocationInWindow, null);
            if (rect.Contains(p) && !isDragging)
            {
                isDragging = true;
                NeedsDisplay = true;
                distance = new CGPoint(p.X - center.X, p.Y - center.Y);
            }
        }

        public override void MouseUp(NSEvent theEvent)
        {
            isDragging = false;
            NeedsDisplay = true;
        }

        public override void MouseDragged(NSEvent theEvent)
        {
            if (!isDragging)
                return;

            var p = ConvertPointFromView(theEvent.LocationInWindow, null);
            center.X = p.X - distance.X;
            center.Y = p.Y - distance.Y;
            NeedsDisplay = true;
        }

        public override void MouseExited(NSEvent theEvent)
        {
            // 範囲からはみ出した時、ドラッグを終了する
            if (!isDragging)
                return;
            isDragging = false;
            NeedsDisplay = true;
        }

    }
}
